import { z } from 'zod';
import { generateObject } from 'ai';


// Define the schema for the structured output
const componentSchema = z.object({
  component: z.object({
    code: z.string().describe("React component code generated by the LLM"),
    context: z.string().describe("Context information for the generated component")
  })
});

// Function to process the code string and handle backticks
function processCodeString(codeString) {
  let processedCode = codeString.replace(/``/g, '\\\\\\');
  if (processedCode.startsWith('') && processedCode.endsWith('')) {
    processedCode = processedCode.slice(1, -1);
  }
  return processedCode;
}

// Updated prompt template
const PROMPT_TEMPLATE = `
Generate a minimalistic and clean UI code based on the provided context and prompt.

Context: {context}
Prompt: {prompt}

Requirements:
- Use React functional components and hooks (useState, useEffect).
- No external libraries or hooks unless absolutely necessary.
- Keep the structure simple and easy to understand.
- Focus on essential HTML elements and styling using basic inline CSS classes.

Generated Code:
`;

// Main function to generate structured output
async function generateStructuredOutput(model, context, prompt) {
  

  const { object } = await generateObject({
    model: model,
    schema: componentSchema,
    prompt: PROMPT_TEMPLATE.replace('{context}', context).replace('{prompt}', prompt),
  });

  if (object && object.component) {
    return {
      code: object.component.code,
      context: object.component.context
    };
  }

  throw new Error('Failed to generate React component');
}


export default generateStructuredOutput;